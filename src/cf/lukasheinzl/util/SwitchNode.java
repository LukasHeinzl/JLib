package cf.lukasheinzl.util;

import java.util.function.BiFunction;
import java.util.function.Supplier;

/**
 * This class is used by the {@link cf.lukasheinzl.util.Utils#switchComplex(Object, BiFunction)} method. Each Node
 * represents a case in the switch statement.
 * 
 * @author Lukas Heinzl
 *
 * @param <T>
 *            This is the type of the value to 'switch'
 * @param <U>
 *            This is the type of the value(s) to compare to ('case')
 * @param <R>
 *            This is the type if the value this 'switch' statement returns
 */
public class SwitchNode<T, U extends T, R>{

	private SwitchNode<T, U, R>			parent;
	private T							compareValue;
	private BiFunction<T, U, Boolean>	compare;

	private U							value;
	private Supplier<R>					result;

	/**
	 * This constructs a new Node. This is package-private and should only be generated by the
	 * {@link cf.lukasheinzl.util.Utils#switchComplex(Object, BiFunction)} method.
	 * 
	 * @param parent
	 *            The parent of this node
	 * @param compareValue
	 *            The value to 'switch'
	 * @param compare
	 *            The function to use for comparison
	 */
	SwitchNode(SwitchNode<T, U, R> parent, T compareValue, BiFunction<T, U, Boolean> compare){
		this.parent = parent;
		this.compareValue = compareValue;
		this.compare = compare;
	}

	/**
	 * This method adds a case to the switch statement and returns a new node.
	 * 
	 * @param value
	 *            The value to compare to
	 * @param result
	 *            The supplier, that returns the result, to call when this value compares to the input value
	 * @return A new node that can be used to add more cases or execute this statement with the {@link #go()} method
	 */
	public SwitchNode<T, U, R> caseIf(U value, Supplier<R> result){
		if(this.value != null){
			throw new IllegalStateException("Cannot call caseIf multiple times!");
		}

		this.value = value;
		this.result = result;

		return new SwitchNode<>(this, compareValue, compare);
	}

	/**
	 * This method runs this switch statement.
	 * 
	 * @return The value that results from any match or an IllegalArgumentException if no case compares to true
	 */
	public R go(){
		if(value != null && compare.apply(compareValue, value)){
			return result.get();
		}

		if(parent != null){
			return parent.go();
		}

		throw new IllegalArgumentException("No result found!");
	}

}
